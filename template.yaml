AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: vd-speed-test — Full Featured Free Tier Deployment

Parameters:
  NotificationEmail:
    Type: String
    Default: varathu09@gmail.com
    Description: Email address to receive CloudWatch alarm notifications
  
  S3BucketName:
    Type: String
    Default: vd-speed-test
    Description: S3 bucket name for raw/daily speed test data

  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, prod]
    Description: Environment name

  # Schedules (UTC). These defaults align with IST requirements.
  DailyScheduleExpression:
    Type: String
    Default: cron(30 0 * * ? *)           # 00:30 UTC = 06:00 IST daily
    Description: Cron for daily aggregation (00:30 UTC)
  WeeklyScheduleExpression:
    Type: String
    Default: cron(30 20 ? * MON *)        # Mon 20:30 UTC = Tue 02:00 IST (last completed Mon–Sun)
    Description: Cron for weekly aggregation (Tue 02:00 IST)
  MonthlyScheduleExpression:
    Type: String
    Default: cron(30 20 L * ? *)          # Last day 20:30 UTC = 1st 02:00 IST
    Description: Cron for monthly aggregation (1st 02:00 IST)
  YearlyScheduleExpression:
    Type: String
    Default: cron(30 20 31 12 ? *)        # Dec 31 20:30 UTC = Jan 1 02:00 IST
    Description: Cron for yearly aggregation (Jan 1 02:00 IST)

  ExpectedSpeedMbps:
    Type: Number
    Default: 200
    Description: Expected internet speed in Mbps for anomaly detection

  TolerancePercent:
    Type: Number
    Default: 10
    Description: Tolerance percentage for speed variations

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: python3.12
    Architectures: [x86_64]
    Environment:
      Variables:
        S3_BUCKET: !Ref S3BucketName
        S3_BUCKET_WEEKLY: !Sub 'vd-speed-test-weekly-${Environment}'
        S3_BUCKET_MONTHLY: !Sub 'vd-speed-test-monthly-${Environment}'
        S3_BUCKET_YEARLY: !Sub 'vd-speed-test-yearly-${Environment}'
        ENVIRONMENT: !Ref Environment
        AWS_REGION1: ap-south-1
        EXPECTED_SPEED_MBPS: !Ref ExpectedSpeedMbps
        TOLERANCE_PERCENT: !Ref TolerancePercent
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: INFO
      SystemLogLevel: INFO
    Tags:
      Application: vd-speed-test
      ManagedBy: SAM

Resources:
  # ---------------- S3 buckets ----------------
  WeeklyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'vd-speed-test-weekly-${Environment}'
      VersioningConfiguration: { Status: Suspended }
      LifecycleConfiguration:
        Rules:
          - Id: WeeklyRetention
            Status: Enabled
            ExpirationInDays: 730
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  MonthlyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'vd-speed-test-monthly-${Environment}'
      VersioningConfiguration: { Status: Suspended }
      LifecycleConfiguration:
        Rules:
          - Id: MonthlyRetention
            Status: Enabled
            ExpirationInDays: 1825
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  YearlyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'vd-speed-test-yearly-${Environment}'
      VersioningConfiguration: { Status: Suspended }
      LifecycleConfiguration:
        Rules:
          - Id: YearlyRetention
            Status: Enabled
            ExpirationInDays: 3650
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  # -------------- Functions & Logs --------------
  VdSpeedTestAggregator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'vd-speedtest-daily-aggregator-${Environment}'
      Handler: lambda_function.lambda_handler
      CodeUri: ./
      Description: Aggregates daily/weekly/monthly/yearly speed test data
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
        - S3CrudPolicy:
            BucketName: !Sub 'vd-speed-test-weekly-${Environment}'
        - S3CrudPolicy:
            BucketName: !Sub 'vd-speed-test-monthly-${Environment}'
        - S3CrudPolicy:
            BucketName: !Sub 'vd-speed-test-yearly-${Environment}'
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins: ['*']
          AllowMethods: [GET, POST]
          AllowHeaders: ['*']
      EventInvokeConfig:
        MaximumRetryAttempts: 1
    Metadata:
      BuildMethod: python3.12

  AggregatorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vd-speedtest-daily-aggregator-${Environment}'
      RetentionInDays: 3
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  # -------------- EventBridge Rules --------------
  DailyAggregationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'vd-speedtest-daily-schedule-${Environment}'
      Description: Trigger daily aggregation (00:30 UTC)
      ScheduleExpression: !Ref DailyScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt VdSpeedTestAggregator.Arn
          Id: LambdaTargetDaily
          Input: '{"mode":"daily"}'
          RetryPolicy:
            MaximumRetryAttempts: 2

  WeeklyAggregationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'vd-speedtest-weekly-schedule-${Environment}'
      Description: Trigger weekly aggregation (Tue 02:00 IST)
      ScheduleExpression: !Ref WeeklyScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt VdSpeedTestAggregator.Arn
          Id: LambdaTargetWeekly
          Input: '{"mode":"weekly"}'
          RetryPolicy:
            MaximumRetryAttempts: 2

  MonthlyAggregationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'vd-speedtest-monthly-schedule-${Environment}'
      Description: Trigger monthly aggregation (1st 02:00 IST)
      ScheduleExpression: !Ref MonthlyScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt VdSpeedTestAggregator.Arn
          Id: LambdaTargetMonthly
          Input: '{"mode":"monthly"}'
          RetryPolicy:
            MaximumRetryAttempts: 2

  YearlyAggregationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'vd-speedtest-yearly-schedule-${Environment}'
      Description: Trigger yearly aggregation (Jan 1 02:00 IST)
      ScheduleExpression: !Ref YearlyScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt VdSpeedTestAggregator.Arn
          Id: LambdaTargetYearly
          Input: '{"mode":"yearly"}'
          RetryPolicy:
            MaximumRetryAttempts: 2

  # --- Lambda Permissions for EventBridge Schedules (NO DUPLICATES) ---
  PermissionForDailySchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VdSpeedTestAggregator
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyAggregationSchedule.Arn

  PermissionForWeeklySchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VdSpeedTestAggregator
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyAggregationSchedule.Arn

  PermissionForMonthlySchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VdSpeedTestAggregator
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonthlyAggregationSchedule.Arn

  PermissionForYearlySchedule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VdSpeedTestAggregator
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt YearlyAggregationSchedule.Arn

  # ---------------- Dashboard Lambda ----------------
  VdSpeedTestDashboard:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'vd-speedtest-dashboard-${Environment}'
      Handler: lambda_dashboard.lambda_handler
      CodeUri: ./
      Description: Flask dashboard for vd-speed-test
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          FLASK_ENV: production
          AWS_REGION1: ap-south-1
          S3_BUCKET: !Ref S3BucketName
          ENVIRONMENT: !Ref Environment
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins: ['*']
          AllowMethods: [GET]
          AllowHeaders: ['*']
          MaxAge: 300
      EventInvokeConfig:
        MaximumRetryAttempts: 0
    Metadata:
      BuildMethod: python3.12

  DashboardLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vd-speedtest-dashboard-${Environment}'
      RetentionInDays: 1
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  # ---------------- Hourly Checker ----------------
  VdSpeedTestHourlyChecker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'vd-speedtest-hourly-checker-${Environment}'
      Handler: lambda_hourly_check.lambda_handler
      CodeUri: ./
      Description: Return hourly/minute folder count for a given date
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          AWS_REGION1: ap-south-1
          S3_BUCKET: !Ref S3BucketName
          ENVIRONMENT: !Ref Environment
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - Statement:
            - Effect: Allow
              Action: [s3:ListBucket]
              Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins: ['*']
          AllowMethods: [GET, POST]
          AllowHeaders: ['*']
      EventInvokeConfig:
        MaximumRetryAttempts: 1
    Metadata:
      BuildMethod: python3.12

  HourlyCheckerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/vd-speedtest-hourly-checker-${Environment}'
      RetentionInDays: 1
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  # ---------------- Metric Filters ----------------
  AggregatorErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref AggregatorLogGroup
      FilterPattern: '{ $.level = "ERROR" }'
      MetricTransformations:
        - MetricName: AggregatorErrors
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  AggregatorWarningMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref AggregatorLogGroup
      FilterPattern: '{ $.level = "WARNING" }'
      MetricTransformations:
        - MetricName: AggregatorWarnings
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  AggregatorSuccessMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref AggregatorLogGroup
      FilterPattern: '{ $.level = "INFO" && $.message = "*Completed*" }'
      MetricTransformations:
        - MetricName: AggregatorSuccess
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  DashboardErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref DashboardLogGroup
      FilterPattern: '{ $.level = "ERROR" }'
      MetricTransformations:
        - MetricName: DashboardErrors
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  DashboardWarningMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref DashboardLogGroup
      FilterPattern: '{ $.level = "WARNING" }'
      MetricTransformations:
        - MetricName: DashboardWarnings
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  HourlyCheckerErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref HourlyCheckerLogGroup
      FilterPattern: '{ $.level = "ERROR" }'
      MetricTransformations:
        - MetricName: HourlyCheckerErrors
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  HourlyCheckerWarningMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref HourlyCheckerLogGroup
      FilterPattern: '{ $.level = "WARNING" }'
      MetricTransformations:
        - MetricName: HourlyCheckerWarnings
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  DataCollectionMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref AggregatorLogGroup
      FilterPattern: '{ $.message = "*Aggregated*records*" }'
      MetricTransformations:
        - MetricName: DataCollectionRuns
          MetricNamespace: vd-speed-test/Logs
          MetricValue: 1
          DefaultValue: 0
          Unit: Count

  # ---------------- Alarms -> SNS ----------------
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub vd-speedtest-alerts-${Environment}
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail
      Tags:
        - Key: Application
          Value: vd-speed-test
        - Key: ManagedBy
          Value: SAM

  AggregatorErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-aggregator-errors-${Environment}'
      AlarmDescription: Alert when aggregator has errors
      MetricName: AggregatorErrors
      Namespace: vd-speed-test/Logs
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  AggregatorWarningAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-aggregator-warnings-${Environment}'
      AlarmDescription: Alert when aggregator has many warnings
      MetricName: AggregatorWarnings
      Namespace: vd-speed-test/Logs
      Statistic: Sum
      Period: 86400
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  DashboardErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-dashboard-errors-${Environment}'
      AlarmDescription: Alert when dashboard has errors
      MetricName: DashboardErrors
      Namespace: vd-speed-test/Logs
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  HourlyCheckerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-checker-errors-${Environment}'
      AlarmDescription: Alert when hourly checker has errors
      MetricName: HourlyCheckerErrors
      Namespace: vd-speed-test/Logs
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  AggregatorLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-lambda-aggregator-error-${Environment}'
      AlarmDescription: Lambda function errors for aggregator
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref VdSpeedTestAggregator
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  DashboardLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-lambda-dashboard-error-${Environment}'
      AlarmDescription: Lambda function errors for dashboard
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref VdSpeedTestDashboard
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  DataCollectionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'vd-speedtest-data-collection-failure-${Environment}'
      AlarmDescription: Alert when no data collected for 2 days
      MetricName: DataCollectionRuns
      Namespace: vd-speed-test/Logs
      Statistic: Sum
      Period: 172800
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      AlarmActions: [ !Ref AlertsTopic ]
      OKActions: [ !Ref AlertsTopic ]

  # ---------------------------------------------------------------------------
  # CloudWatch Logs Insights Query Definitions
  # ---------------------------------------------------------------------------

  AggregatorAnomaliesQuery:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: !Sub 'vd-speedtest-aggregator-anomalies-${Environment}'
      QueryString: |
        fields @timestamp, @message, level
        | filter level = "WARNING"
        | sort @timestamp desc
        | limit 50
      LogGroupNames:
        - !Ref AggregatorLogGroup

  AllFunctionsErrorSummaryQuery:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: !Sub 'vd-speedtest-all-errors-${Environment}'
      QueryString: |
        fields @timestamp, @logStream, @message, level
        | filter level = "ERROR"
        | stats count(*) as error_count by @logStream
        | sort error_count desc
      LogGroupNames:
        - !Ref AggregatorLogGroup
        - !Ref DashboardLogGroup
        - !Ref HourlyCheckerLogGroup

  PerformanceMetricsQuery:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: !Sub 'vd-speedtest-performance-${Environment}'
      QueryString: |
        fields @timestamp, message
        | filter message like /Completed/
        | sort @timestamp desc
        | limit 50
      LogGroupNames:
        - !Ref AggregatorLogGroup
        - !Ref DashboardLogGroup
        - !Ref HourlyCheckerLogGroup

  DashboardErrorsQuery:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: !Sub 'vd-speedtest-dashboard-errors-${Environment}'
      QueryString: |
        fields @timestamp, @message, level
        | filter level = "ERROR"
        | sort @timestamp desc
        | limit 50
      LogGroupNames:
        - !Ref DashboardLogGroup

  AggregatorSuccessQuery:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: !Sub 'vd-speedtest-aggregator-success-${Environment}'
      QueryString: |
        fields @timestamp, message
        | filter message like /Aggregation summary/
        | sort @timestamp desc
        | limit 20
      LogGroupNames:
        - !Ref AggregatorLogGroup

  # ---------------- Dashboards (ACTUALLY FIXED NOW) ----------------
  MainMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'vd-speedtest-main-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "vd-speed-test/Logs", "AggregatorErrors" ],
                  [ "vd-speed-test/Logs", "AggregatorWarnings" ],
                  [ "vd-speed-test/Logs", "AggregatorSuccess" ]
                ],
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Aggregator Status",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${VdSpeedTestAggregator}" ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${VdSpeedTestDashboard}" ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${VdSpeedTestHourlyChecker}" ]
                ],
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Invocations",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${VdSpeedTestAggregator}" ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${VdSpeedTestDashboard}" ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${VdSpeedTestHourlyChecker}" ]
                ],
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Errors",
                "period": 300
              }
            }
          ]
        }

  PerformanceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'vd-speedtest-performance-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${VdSpeedTestAggregator}" ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${VdSpeedTestDashboard}" ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${VdSpeedTestHourlyChecker}" ]
                ],
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Duration (ms)",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Throttles", "FunctionName", "${VdSpeedTestAggregator}" ],
                  [ "AWS/Lambda", "Throttles", "FunctionName", "${VdSpeedTestDashboard}" ],
                  [ "AWS/Lambda", "Throttles", "FunctionName", "${VdSpeedTestHourlyChecker}" ]
                ],
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Throttles",
                "period": 300
              }
            }
          ]
        }

# ---------------- Outputs (FIXED) ----------------
# ---------------- Outputs (FIXED FOR SAM) ----------------
# ---------------- Outputs (ACTUALLY WORKING VERSION) ----------------
Outputs:
  AggregatorFunctionUrl:
    Description: URL for Daily Aggregator Function
    Value: !GetAtt VdSpeedTestAggregatorUrl.FunctionUrl

  DashboardFunctionUrl:
    Description: URL for Dashboard Function
    Value: !GetAtt VdSpeedTestDashboardUrl.FunctionUrl

  HourlyCheckerFunctionUrl:
    Description: URL for Hourly Checker Function
    Value: !GetAtt VdSpeedTestHourlyCheckerUrl.FunctionUrl

  MainDashboardUrl:
    Description: Main CloudWatch Monitoring Dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=vd-speedtest-main-${Environment}'

  PerformanceDashboardUrl:
    Description: Performance Metrics Dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=vd-speedtest-performance-${Environment}'

  CloudWatchLogsInsightsUrl:
    Description: CloudWatch Logs Insights
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:logs-insights'

  CloudWatchAlarmsUrl:
    Description: CloudWatch Alarms Console
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:'

  AggregatorLogGroupName:
    Description: Aggregator log group
    Value: !Ref AggregatorLogGroup

  DashboardLogGroupName:
    Description: Dashboard log group
    Value: !Ref DashboardLogGroup

  HourlyCheckerLogGroupName:
    Description: Checker log group
    Value: !Ref HourlyCheckerLogGroup

  AlertsTopicArn:
    Description: "SNS Topic ARN for alerts — confirm the email subscription"
    Value: !Ref AlertsTopic
  
  SNSNotificationEmail:
    Description: Email address subscribed to SNS alerts
    Value: !Ref NotificationEmail

    
#==========================END================================

# ===============================================================
# Deployment & Testing Commands — vd-speed-test stack
# ===============================================================

# Validate SAM template syntax
# sam validate

# Build Lambda functions using container for dependency isolation
# sam build --use-container

# Initial guided deploy (creates roles, buckets, topics, dashboards)
# sam deploy --guided --stack-name vd-speedtest-stack --parameter-overrides Environment=prod ExpectedSpeedMbps=200 TolerancePercent=10 --capabilities CAPABILITY_IAM

# Subsequent deploys using saved samconfig.toml
# sam deploy --config-file samconfig.toml --no-confirm-changeset

# ---------------------------------------------------------------
# Check stack outputs (URLs, ARNs, dashboard links)
# aws cloudformation describe-stacks --stack-name vd-speedtest-stack --query 'Stacks[0].Outputs'

# ---------------------------------------------------------------
# Tail Lambda logs (real-time)

# Daily Aggregator logs
# sam logs -n vd-speedtest-daily-aggregator-prod --stack-name vd-speedtest-stack --tail

# Dashboard logs
# sam logs -n vd-speedtest-dashboard-prod --stack-name vd-speedtest-stack --tail

# Hourly Checker logs
# sam logs -n vd-speedtest-hourly-checker-prod --stack-name vd-speedtest-stack --tail

# ---------------------------------------------------------------
# Invoke Lambdas manually

# Daily aggregation test
# aws lambda invoke --function-name vd-speedtest-daily-aggregator-prod --payload '{"mode":"daily"}' out-daily.json --cli-binary-format raw-in-base64-out; cat out-daily.json | jq

# Weekly aggregation test
# aws lambda invoke --function-name vd-speedtest-daily-aggregator-prod --payload '{"mode":"weekly"}' out-weekly.json --cli-binary-format raw-in-base64-out; cat out-weekly.json | jq

# Monthly aggregation test
# aws lambda invoke --function-name vd-speedtest-daily-aggregator-prod --payload '{"mode":"monthly"}' out-monthly.json --cli-binary-format raw-in-base64-out; cat out-monthly.json | jq

# Yearly aggregation test
# aws lambda invoke --function-name vd-speedtest-daily-aggregator-prod --payload '{"mode":"yearly"}' out-yearly.json --cli-binary-format raw-in-base64-out; cat out-yearly.json | jq

# ---------------------------------------------------------------
# Verify CloudWatch metrics

# Aggregator errors
# aws cloudwatch get-metric-statistics --namespace vd-speed-test/Logs --metric-name AggregatorErrors --start-time 2025-01-01T00:00:00Z --end-time 2025-01-02T00:00:00Z --period 3600 --statistics Sum

# Dashboard errors
# aws cloudwatch get-metric-statistics --namespace vd-speed-test/Logs --metric-name DashboardErrors --start-time 2025-01-01T00:00:00Z --end-time 2025-01-02T00:00:00Z --period 3600 --statistics Sum

# Hourly checker errors
# aws cloudwatch get-metric-statistics --namespace vd-speed-test/Logs --metric-name HourlyCheckerErrors --start-time 2025-01-01T00:00:00Z --end-time 2025-01-02T00:00:00Z --period 3600 --statistics Sum

# ---------------------------------------------------------------
# CloudWatch alarm checks

# Aggregator error alarm
# aws cloudwatch describe-alarms --alarm-names vd-speedtest-aggregator-errors-prod

# Aggregator warning alarm
# aws cloudwatch describe-alarms --alarm-names vd-speedtest-aggregator-warnings-prod

# Data collection failure alarm
# aws cloudwatch describe-alarms --alarm-names vd-speedtest-data-collection-failure-prod

# ---------------------------------------------------------------
# CloudWatch dashboard & queries

# Get full dashboard JSON
# aws cloudwatch get-dashboard --dashboard-name vd-speedtest-main-prod

# List dashboard query definitions
# aws logs describe-query-definitions --query 'queryDefinitions[?starts_with(Name, `vd-speedtest/`)]'

# ---------------------------------------------------------------
# SNS subscription
# Check your email (from AWS Notifications) and click “Confirm subscription” 
# to start receiving alerts from vd-speedtest-alerts-prod
# ===============================================================
